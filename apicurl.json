{"instance_id": ["1", "2", "3", "4", "5"], "base_commit": ["b84fc67c113d76588c80406cb4b3b54b52b16f21", "d87cca339f0cd4fb97a96c8a5a6ee764df024f24", "2ba551ab2b0d2cc6f22ef597ffec74f4749e81b4", "8ed8737680a0740aa170a3b2cfdc37ef919ebdf0", "bdad4e1bac52fc6198df5e37ef568c8bf019a99c"], "environment_setup_commit": ["b84fc67c113d76588c80406cb4b3b54b52b16f21", "d87cca339f0cd4fb97a96c8a5a6ee764df024f24", "2ba551ab2b0d2cc6f22ef597ffec74f4749e81b4", "8ed8737680a0740aa170a3b2cfdc37ef919ebdf0", "bdad4e1bac52fc6198df5e37ef568c8bf019a99c"], "problem_statement": ["The existing code fetches and prints the collection each time the code is called. Add a function in 'fetch_process_collection.py', so it stores the collection as a JSON in the path 'data/collection.json'. Follow the tests and the function call already implemented in '__main__.py'", "The code provided fetches a users collection and stores it in a file with the path 'data/collection.json'. But it overwrites the file, if it already exists. Implement a check for the file and if present, load the collection from the json file", "For now, the collection data is only fetched and stored. I now want to explore the data further: Implement a the function 'split_artist_release_percentage' according to the tests present. It should return a dataframe containing the top artists in the collection with their percentage and the rest of the artists with their accumulated percentage", "We have the method 'split_artists_release_percentage' in place which returns a dataframe containing the top artists and the others with their percentage. Implement a function called 'visualize_artist_release_percentage' fullfilling the tests provided and visualising the percentages in a pie chart", "write a function called 'list_artist_releases' which prints all releases in the collection in a table view if no artist is specified. If an artist is specified, then only print the releases by this artist"],"FAIL_TO_PASS": ["['test_save_collection_to_json (test.test_fetch_process_collection.test_save_collection_to_json)', 'test_save_collection_to_json_nested (test.test_fetch_process_collection.test_save_collection_to_json_nested)', 'test_save_collection_to_json_empty (test.test_fetch_process_collection.test_save_collection_to_json_empty)', 'test_save_collection_to_json_file_error (test.test_fetch_process_collection.test_save_collection_to_json_file_error)', 'test_save_collection_to_json_invalid_json (test.test_fetch_process_collection.test_save_collection_to_json_invalid_json)']", "['test_save_collection_new_file (test.test_fetch_process_collection.test_save_collection_new_file)', 'test_save_collection_overwrite_old_file (test.test_fetch_process_collection.test_save_collection_overwrite_old_file)', 'test_save_collection_do_not_overwrite_recent_file (test.test_fetch_process_collection.test_save_collection_do_not_overwrite_recent_file)', 'test_save_collection_exact_24_hours (test.test_fetch_process_collection.test_save_collection_exact_24_hours)']", "['test_split_artist_release_percentage_normal (test.test_fetch_process_collection.test_split_artist_release_percentage_normal)', 'test_split_artist_release_percentage_empty_list (test.test_fetch_process_collection.test_split_artist_release_percentage_empty_list)', 'test_split_artist_release_percentage_not_list (test.test_fetch_process_collection.test_split_artist_release_percentage_not_list)', 'test_split_artist_release_percentage_no_artist_column (test.test_fetch_process_collection.test_split_artist_release_percentage_no_artist_column)', 'test_split_artist_release_percentage_all_unique (test.test_fetch_process_collection.test_split_artist_release_percentage_all_unique)', 'test_split_artist_release_percentage_no_others (test.test_fetch_process_collection.test_split_artist_release_percentage_no_others)', 'test_split_artist_release_percentage_large_top_number (test.test_fetch_process_collection.test_split_artist_release_percentage_large_top_number)', 'test_split_artist_release_percentage_different_top_numbers[1] (test.test_fetch_process_collection.test_split_artist_release_percentage_different_top_numbers[1])', 'test_split_artist_release_percentage_different_top_numbers[2] (test.test_fetch_process_collection.test_split_artist_release_percentage_different_top_numbers[2])', 'test_split_artist_release_percentage_different_top_numbers[3] (test.test_fetch_process_collection.test_split_artist_release_percentage_different_top_numbers[3])', 'test_split_artist_release_percentage_single_artist (test.test_fetch_process_collection.test_split_artist_release_percentage_single_artist)']", "['test_visualize_artist_release_percentage_normal (test.test_fetch_process_collection.test_visualize_artist_release_percentage_normal)', 'test_visualize_artist_release_empty_dataframe (test.test_fetch_process_collection.test_visualize_artist_release_empty_dataframe)', 'test_visualize_artist_release_percentage_missing_columns (test.test_fetch_process_collection.test_visualize_artist_release_percentage_missing_columns)', 'test_visualize_artist_release_percentage_various_inputs (test.test_fetch_process_collection.test_visualize_artist_release_percentage_various_inputs)', 'test_visualize_artist_release_percentage_plot_details (test.test_fetch_process_collection.test_visualize_artist_release_percentage_plot_details)']", "['test_list_artist_releases_all (test.test_fetch_process_collection.test_list_artist_releases_all)', 'test_list_artist_releases_specific_artist (test.test_fetch_process_collection.test_list_artist_releases_specific_artist)', 'test_list_artist_releases_nonexistent_artist (test.test_fetch_process_collection.test_list_artist_releases_nonexistent_artist)', 'test_list_artist_releases_empty_collection (test.test_fetch_process_collection.test_list_artist_releases_empty_collection)', 'test_list_artist_releases_output_format (test.test_fetch_process_collection.test_list_artist_releases_output_format)', 'test_list_artist_releases_return_value (test.test_fetch_process_collection.test_list_artist_releases_return_value)', 'test_list_artist_releases_various_artists (test.test_fetch_process_collection.test_list_artist_releases_various_artists)']"], "repo": ["bodhinsky/apicurl", "bodhinsky/apicurl", "bodhinsky/apicurl", "bodhinsky/apicurl", "bodhinsky/apicurl"], "test_patch": ["[]", "[]", "[]", "[]", "[]"], "text": ["Context\n...\n[start of apicurl/__main__.py]\n...\n[end of apicurl/__main__.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n", "Context\n...\n[start of apicurl/__main__.py]\n...\n[end of apicurl/__main__.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n", "Context\n...\n[start of apicurl/__main__.py]\n...\n[end of apicurl/__main__.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n", "Context\n...\n[start of apicurl/__main__.py]\n...\n[end of apicurl/__main__.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n", "Context\n...\n[start of apicurl/__main__.py]\n...\n[end of apicurl/__main__.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n"]}