{
    "instance_id": [
        "1",
        "2",
        "3",
        "4",
        "5"
    ],
    "base_commit": [
        "ccc3d719a0bd5e5564e6faf4d3d87d6d35c8ed7c",
        "cac6fa0bb7d58bd9e99b26e506b3c48be34449c0",
        "1a469461d1ed6c58ce0dfba48e7b93e31b7817aa",
        "f2df51fee8d338c6d718f015f3fddd2c52024a58",
        "d8f0050fa18a478c2a4509fe4099dbbccc9dbc6f"
    ],
    "environment_setup_commit": [
        "ccc3d719a0bd5e5564e6faf4d3d87d6d35c8ed7c",
        "cac6fa0bb7d58bd9e99b26e506b3c48be34449c0",
        "1a469461d1ed6c58ce0dfba48e7b93e31b7817aa",
        "f2df51fee8d338c6d718f015f3fddd2c52024a58",
        "d8f0050fa18a478c2a4509fe4099dbbccc9dbc6f"
    ],
    "problem_statement": [
        "The existing code fetches the collection each time the code is called. I've added the function save_collection_to_json, so it stores the collection as a JSON in the path specified, but it does not store anything as of now. Fix the implementation of the function.",
        "save_collection_to_json overwrites the file, if it already exists. Firstly I wanted to check if the collection given has valid syntax, then check for the file and if present, check when it was created. When the file is not older than 24 hours, load the collection from the json file. Additionally, let the function return True if the file was changed, False otherwise.",
        "For now, the collection data is only fetched and stored. My function called split_artist_release_percentage is not properly working as of now. It should return a dataframe containing the top artists in the collection with their percentage and the rest of the artists with their accumulated percentage",
        "We have the function visualize_artist_release_percentage in place, which should visualize the top_k_artists in a pie chart using mathplotlib. As if now, this is not working and returning errors",
        "Fix the function called list_artist_releases which should print all releases in the collection in a table view if no artist is specified. If an artist is specified, then only print the releases by this artist."
    ],
    "FAIL_TO_PASS": [
        "['test_save_collection_to_json (test.test_fetch_process_collection.test_save_collection_to_json)', 'test_save_collection_to_json_nested (test.test_fetch_process_collection.test_save_collection_to_json_nested)', 'test_save_collection_to_json_empty (test.test_fetch_process_collection.test_save_collection_to_json_empty)', 'test_save_collection_to_json_file_error (test.test_fetch_process_collection.test_save_collection_to_json_file_error)', 'test_save_collection_to_json_invalid_json (test.test_fetch_process_collection.test_save_collection_to_json_invalid_json)']",
        "['test_save_collection_new_file (test.test_fetch_process_collection.test_save_collection_new_file)', 'test_save_collection_overwrite_old_file (test.test_fetch_process_collection.test_save_collection_overwrite_old_file)', 'test_save_collection_do_not_overwrite_recent_file (test.test_fetch_process_collection.test_save_collection_do_not_overwrite_recent_file)', 'test_save_collection_exact_24_hours (test.test_fetch_process_collection.test_save_collection_exact_24_hours)']",
        "['test_split_artist_release_percentage_normal (test.test_fetch_process_collection.test_split_artist_release_percentage_normal)', 'test_split_artist_release_percentage_empty_list (test.test_fetch_process_collection.test_split_artist_release_percentage_empty_list)', 'test_split_artist_release_percentage_not_list (test.test_fetch_process_collection.test_split_artist_release_percentage_not_list)', 'test_split_artist_release_percentage_no_artist_column (test.test_fetch_process_collection.test_split_artist_release_percentage_no_artist_column)', 'test_split_artist_release_percentage_all_unique (test.test_fetch_process_collection.test_split_artist_release_percentage_all_unique)', 'test_split_artist_release_percentage_no_others (test.test_fetch_process_collection.test_split_artist_release_percentage_no_others)', 'test_split_artist_release_percentage_large_top_number (test.test_fetch_process_collection.test_split_artist_release_percentage_large_top_number)', 'test_split_artist_release_percentage_different_top_numbers[1] (test.test_fetch_process_collection.test_split_artist_release_percentage_different_top_numbers[1])', 'test_split_artist_release_percentage_different_top_numbers[2] (test.test_fetch_process_collection.test_split_artist_release_percentage_different_top_numbers[2])', 'test_split_artist_release_percentage_different_top_numbers[3] (test.test_fetch_process_collection.test_split_artist_release_percentage_different_top_numbers[3])', 'test_split_artist_release_percentage_single_artist (test.test_fetch_process_collection.test_split_artist_release_percentage_single_artist)']",
        "['test_visualize_artist_release_percentage_normal (test.test_fetch_process_collection.test_visualize_artist_release_percentage_normal)', 'test_visualize_artist_release_empty_dataframe (test.test_fetch_process_collection.test_visualize_artist_release_empty_dataframe)', 'test_visualize_artist_release_percentage_missing_columns (test.test_fetch_process_collection.test_visualize_artist_release_percentage_missing_columns)', 'test_visualize_artist_release_percentage_various_inputs (test.test_fetch_process_collection.test_visualize_artist_release_percentage_various_inputs)', 'test_visualize_artist_release_percentage_plot_details (test.test_fetch_process_collection.test_visualize_artist_release_percentage_plot_details)']",
        "['test_list_artist_releases_all (test.test_fetch_process_collection.test_list_artist_releases_all)', 'test_list_artist_releases_specific_artist (test.test_fetch_process_collection.test_list_artist_releases_specific_artist)', 'test_list_artist_releases_nonexistent_artist (test.test_fetch_process_collection.test_list_artist_releases_nonexistent_artist)', 'test_list_artist_releases_empty_collection (test.test_fetch_process_collection.test_list_artist_releases_empty_collection)', 'test_list_artist_releases_output_format (test.test_fetch_process_collection.test_list_artist_releases_output_format)', 'test_list_artist_releases_return_value (test.test_fetch_process_collection.test_list_artist_releases_return_value)', 'test_list_artist_releases_various_artists (test.test_fetch_process_collection.test_list_artist_releases_various_artists)']"
    ],
    "repo": [
        "bodhinsky/apicurl",
        "bodhinsky/apicurl",
        "bodhinsky/apicurl",
        "bodhinsky/apicurl",
        "bodhinsky/apicurl"
    ],
    "test_patch": [
        "[]",
        "[]",
        "[]",
        "[]",
        "[]"
    ],
    "text": [
        "Context\n...\n[start of main.py]\n...\n[end of main.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n",
        "Context\n...\n[start of main.py]\n...\n[end of main.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n",
        "Context\n...\n[start of main.py]\n...\n[end of main.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n",
        "Context\n...\n[start of main.py]\n...\n[end of main.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n",
        "Context\n...\n[start of main.py]\n...\n[end of main.py]\n...\n[start of apicurl/fetch_process_collection.py]\n...\n[end of apicurl/fetch_process_collection.py][start of test/test_fetch_process_collection.py]\n...\n[end of test/test_fetch_process_collection.py]\n...\nContext\n...\n"
    ]
}